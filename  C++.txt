#include <iostream>
#include <stdlib.h>
#include "BigNumber.h"
using namespace std;
#define maxn 120

class DividedByZeroException {
};

class BigNumber {
private:
    vector<char> digits;
    bool sign;          //  正负符号
    void trim();        //  去前导零
public:
    BigNumber();

    BigNumber(const BigNumber &);

    BigNumber(int);    //int转BigNumber
    BigNumber(string &);//string转BigNumber
    BigNumber operator=(const BigNumber &op2);//赋值

    BigNumber abs() const;//绝对值
    BigNumber pow(int a);//快速幂乘方
    BigNumber qow(int b);//开方
    
    friend BigNumber operator+(const BigNumber &, const BigNumber &);//加法
    friend BigNumber operator-(const BigNumber &, const BigNumber &);//减法
    friend BigNumber operator*(const BigNumber &, const BigNumber &);//乘法
    friend BigNumber operator/(const BigNumber &, const BigNumber &) throw(DividedByZeroException);//除法
    friend BigNumber operator%(const BigNumber &, const BigNumber &) throw(DividedByZeroException);//取模

    friend BigNumber operator+=(BigNumber &, const BigNumber &);

    friend BigNumber operator-=(BigNumber &, const BigNumber &);

    friend BigNumber operator*=(BigNumber &, const BigNumber &);

    friend BigNumber operator/=(BigNumber &, const BigNumber &) throw(DividedByZeroException);

    friend BigNumber operator%=(BigNumber &, const BigNumber &) throw(DividedByZeroException);

    friend BigNumber operator-(const BigNumber &);   //取负


    friend bool operator>(const BigNumber &, const BigNumber &);

    friend bool operator<(const BigNumber &, const BigNumber &);

    friend bool operator==(const BigNumber &, const BigNumber &);

    friend bool operator!=(const BigNumber &, const BigNumber &);

    friend bool operator>=(const BigNumber &, const BigNumber &);

    friend bool operator<=(const BigNumber &, const BigNumber &);

    friend ostream &operator<<(ostream &, const BigNumber &);    //print the BigNumber
    friend istream &operator>>(istream &, BigNumber &);         // input the BigNumber

public:
    static const BigNumber ZERO;
    static const BigNumber TEN;
};
const BigNumber BigNumber::ZERO = BigNumber(0);
const BigNumber BigNumber::TEN = BigNumber(10);
BigNumber::BigNumber() {
    sign = true;
}

BigNumber::BigNumber(int val) // int转BigNumber
{
    if (val >= 0)
        sign = true;
    else {
        sign = false;
        val *= (-1);
    }
    do {
        digits.push_back((char) (val % 10));
        val /= 10;
    } while (val != 0);
}

BigNumber::BigNumber(string &def)//string转BigNumber
{
    sign = true;
    for (string::reverse_iterator iter = def.rbegin(); iter < def.rend(); iter++) {
        char ch = (*iter);
        if (iter == def.rend() - 1) {
            if (ch == '+')
                break;
            if (ch == '-') {
                sign = false;
                break;
            }
        }
        digits.push_back((char) ((*iter) - '0'));
    }
    trim();
}

void BigNumber::trim()//0的处理
{
    vector<char>::reverse_iterator iter = digits.rbegin();
    while (!digits.empty() && (*iter) == 0) {
        digits.pop_back();
        iter = digits.rbegin();
    }
    if (digits.size() == 0) {
        sign = true;
        digits.push_back(0);
    }
}

BigNumber::BigNumber(const BigNumber &op2) {
    sign = op2.sign;
    digits = op2.digits;
}

BigNumber BigNumber::operator=(const BigNumber &op2)//大数赋值
{
    digits = op2.digits;
    sign = op2.sign;
    return (*this);
}


BigNumber BigNumber::abs() const//绝对值
{
    if (sign) return *this;
    else return -(*this);
}

BigNumber BigNumber::pow(int a)//快速幂乘方
{
    BigNumber res(1), x;
    x = (*this);
    while (a) {
        if (a & 1) res *= x;
        x *= x;
        a >>= 1;
    }
    return res;

}

BigNumber operator+=(BigNumber &op1, const BigNumber &op2)//加等
{
    if (op1.sign == op2.sign) {
        //只处理相同的符号的情况，异号的情况给-处理
        vector<char>::iterator iter1;
        vector<char>::const_iterator iter2;
        iter1 = op1.digits.begin();
        iter2 = op2.digits.begin();
        char to_add = 0;        //进位
        while (iter1 != op1.digits.end() && iter2 != op2.digits.end()) {
            (*iter1) = (*iter1) + (*iter2) + to_add;
            to_add = ((*iter1) > 9);    // 大于9进一位
            (*iter1) = (*iter1) % 10;
            iter1++;
            iter2++;
        }
        while (iter1 != op1.digits.end())    //
        {
            (*iter1) = (*iter1) + to_add;
            to_add = ((*iter1) > 9);
            (*iter1) %= 10;
            iter1++;
        }
        while (iter2 != op2.digits.end()) {
            char val = (*iter2) + to_add;
            to_add = (val > 9);
            val %= 10;
            op1.digits.push_back(val);
            iter2++;
        }
        if (to_add != 0)
            op1.digits.push_back(to_add);
        return op1;
    } else {
        if (op1.sign)
            return op1 -= (-op2);
        else
            return op1 = op2 - (-op1);
    }

}

BigNumber operator-=(BigNumber &op1, const BigNumber &op2)//减等
{
    if (op1.sign == op2.sign) {
        //只处理相同的符号的情况，异号的情况给+处理
        if (op1.sign) {
            if (op1 < op2)  // 2 - 3
                return op1 = -(op2 - op1);
        } else {
            if (-op1 > -op2)  // (-3)-(-2) = -(3 - 2)
                return op1 = -((-op1) - (-op2));
            else             // (-2)-(-3) = 3 - 2
                return op1 = (-op2) - (-op1);
        }
        vector<char>::iterator iter1;
        vector<char>::const_iterator iter2;
        iter1 = op1.digits.begin();
        iter2 = op2.digits.begin();

        char to_substract = 0;  //借位

        while (iter1 != op1.digits.end() && iter2 != op2.digits.end()) {
            (*iter1) = (*iter1) - (*iter2) - to_substract;
            to_substract = 0;
            if ((*iter1) < 0) {
                to_substract = 1;
                (*iter1) += 10;
            }
            iter1++;
            iter2++;
        }
        while (iter1 != op1.digits.end()) {
            (*iter1) = (*iter1) - to_substract;
            to_substract = 0;
            if ((*iter1) < 0) {
                to_substract = 1;
                (*iter1) += 10;
            } else break;
            iter1++;
        }
        op1.trim();
        return op1;
    } else {
        if (op1 > BigNumber::ZERO)
            return op1 += (-op2);
        else
            return op1 = -(op2 + (-op1));
    }
}

BigNumber operator*=(BigNumber &op1, const BigNumber &op2)//乘等
{
    BigNumber result(0);
    if (op1 == BigNumber::ZERO || op2 == BigNumber::ZERO)
        result = BigNumber::ZERO;
    else {
        vector<char>::const_iterator iter2 = op2.digits.begin();
        while (iter2 != op2.digits.end()) {
            if (*iter2 != 0) {
                deque<char> temp(op1.digits.begin(), op1.digits.end());
                char to_add = 0;
                deque<char>::iterator iter1 = temp.begin();
                while (iter1 != temp.end()) {
                    (*iter1) *= (*iter2);
                    (*iter1) += to_add;
                    to_add = (*iter1) / 10;
                    (*iter1) %= 10;
                    iter1++;
                }
                if (to_add != 0)
                    temp.push_back(to_add);
                int num_of_zeros = iter2 - op2.digits.begin();
                while (num_of_zeros--)
                    temp.push_front(0);
                BigNumber temp2;
                temp2.digits.insert(temp2.digits.end(), temp.begin(), temp.end());
                temp2.trim();
                result = result + temp2;
            }
            iter2++;
        }
        result.sign = ((op1.sign && op2.sign) || (!op1.sign && !op2.sign));
    }
    op1 = result;
    return op1;
}

BigNumber operator/=(BigNumber &op1, const BigNumber &op2) throw(DividedByZeroException)//除等
{
    if (op2 == BigNumber::ZERO)
        throw DividedByZeroException();
    BigNumber t1 = op1.abs(), t2 = op2.abs();
    if (t1 < t2) {
        op1 = BigNumber::ZERO;
        return op1;
    }
    //现在 t1 > t2 > 0
    //只需将 t1/t2的结果交给result就可以了
    deque<char> temp;
    vector<char>::reverse_iterator iter = t1.digits.rbegin();

    BigNumber temp2(0);
    while (iter != t1.digits.rend()) {
        temp2 = temp2 * BigNumber::TEN + BigNumber((int) (*iter));
        char s = 0;
        while (temp2 >= t2) {
            temp2 = temp2 - t2;
            s = s + 1;
        }
        temp.push_front(s);
        iter++;
    }
    op1.digits.clear();
    op1.digits.insert(op1.digits.end(), temp.begin(), temp.end());
    op1.trim();
    op1.sign = ((op1.sign && op2.sign) || (!op1.sign && !op2.sign));
    return op1;
}

BigNumber operator%=(BigNumber &op1, const BigNumber &op2) throw(DividedByZeroException)//模等
{
    return op1 -= ((op1 / op2) * op2);
}

BigNumber operator+(const BigNumber &op1, const BigNumber &op2)//加法
{
    BigNumber temp(op1);
    temp += op2;
    return temp;
}

BigNumber operator-(const BigNumber &op1, const BigNumber &op2)//减法
{
    BigNumber temp(op1);
    temp -= op2;
    return temp;
}

BigNumber operator*(const BigNumber &op1, const BigNumber &op2)//乘法
{
    BigNumber temp(op1);
    temp *= op2;
    return temp;

}

BigNumber operator/(const BigNumber &op1, const BigNumber &op2) throw(DividedByZeroException)//除法
{
    BigNumber temp(op1);
    temp /= op2;
    return temp;
}

BigNumber operator%(const BigNumber &op1, const BigNumber &op2) throw(DividedByZeroException)//取模
{
    BigNumber temp(op1);
    temp %= op2;
    return temp;
}

BigNumber operator-(const BigNumber &op)    //取负
{
    BigNumber temp = BigNumber(op);
    temp.sign = !temp.sign;
    return temp;
}

bool operator<(const BigNumber &op1, const BigNumber &op2)//小于
{
    if (op1.sign != op2.sign)
        return !op1.sign;
    else {
        if (op1.digits.size() != op2.digits.size())
            return (op1.sign && op1.digits.size() < op2.digits.size())
                   || (!op1.sign && op1.digits.size() > op2.digits.size());
        vector<char>::const_reverse_iterator iter1, iter2;
        iter1 = op1.digits.rbegin();
        iter2 = op2.digits.rbegin();
        while (iter1 != op1.digits.rend()) {
            if (op1.sign && *iter1 < *iter2) return true;
            if (op1.sign && *iter1 > *iter2) return false;
            if (!op1.sign && *iter1 > *iter2) return true;
            if (!op1.sign && *iter1 < *iter2) return false;
            iter1++;
            iter2++;
        }
        return false;
    }
}

bool operator==(const BigNumber &op1, const BigNumber &op2)//判等于
{
    if (op1.sign != op2.sign || op1.digits.size() != op2.digits.size())
        return false;
    vector<char>::const_iterator iter1, iter2;
    iter1 = op1.digits.begin();
    iter2 = op2.digits.begin();
    while (iter1 != op1.digits.end()) {
        if (*iter1 != *iter2) return false;
        iter1++;
        iter2++;
    }
    return true;
}

bool operator!=(const BigNumber &op1, const BigNumber &op2)//不等于
{
    return !(op1 == op2);
}

bool operator>=(const BigNumber &op1, const BigNumber &op2)//大等于
{
    return (op1 > op2) || (op1 == op2);
}

bool operator<=(const BigNumber &op1, const BigNumber &op2)//小等于
{
    return (op1 < op2) || (op1 == op2);
}

bool operator>(const BigNumber &op1, const BigNumber &op2)//大于
{
    return !(op1 <= op2);
}

BigNumber BigNumber::qow(int a)//开方
{
    BigNumber ans(1), l(1), r(*this);
    if (a == 1) return r;
    while (l <= r) {
        BigNumber mid = (l + r) / 2;
        if (mid.pow(a) <= (*this)) ans = mid, l = mid + 1;
        else r = mid - 1;
    }
    return ans;
}

ostream &operator<<(ostream &stream, const BigNumber &val)     //输出
{
    if (!val.sign)
        stream << "-";
    for (vector<char>::const_reverse_iterator iter = val.digits.rbegin(); iter != val.digits.rend(); iter++)
        stream << (char) ((*iter) + '0');
    return stream;
}

istream &operator>>(istream &stream, BigNumber &val)//输入
{
    string str;
    stream >> str;
    val = BigNumber(str);
    return stream;
}

int main() {
    BigNumber a, b, mod;
    int n, m;
    cin >> a >> b >> mod >> n >> m;
    cout << a << " + " << b << " = " << a + b << endl;
    cout << a << " - " << b << " = " << a - b << endl;
    cout << a << " * " << b << " = " << a * b << endl;
    cout << a << " / " << b << " = " << a / b << endl;
    cout << a << " % " << b << " = " << a % b << endl;
    cout << a << " ^ " << n << " = " << a.pow(n) << endl;
    cout << a << " ^ 1/" << m << " = " << a.qow(m) << endl;
    
    return 0;
}
